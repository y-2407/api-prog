openapi: 3.1.0
info:
  title: Karelia API Programming - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11

security:
  - bearerAuth: []
  #- ApiKeyAuth: []

servers:
  - url: http://localhost:3000
tags:
  - name: Sample dataset
    description: Everything you need to know about APIs
    externalDocs:
      description: Find out more
      url: http://m.karelia.fi
paths:
  /data:  
    get:
      tags:
        - Sample dataset
      summery: Return a dataset
      description: Return a dataset with something more blaah....
      responses:
        '200': 
          description: successful operation
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Data'
        '415':
          description: Unsupported media type
    post: 
      tags:
        - Sample dataset
      summery: a new record
      description: creates a new entry in the dataset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Data'
      responses:
        '200':
          description: Record added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '409':
          description: Record already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Record already exists"
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unsupported Media Type"
    get:
      summary: Retrieve a record by ID
      tags:
        - Sample dataset
      description: Returns a single record by ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier for the record
      responses:
        '200':
          description: Record found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Record not found"

    put:
      summary: Update a record by ID
      tags:
        - Sample dataset
      description: Updates an existing record or creates a new one if it doesn't exist.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier for the record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Data'
      responses:
        '200':
          description: Record updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '201':
          description: Record created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unsupported Media Type"

    delete:
      summary: Delete a record by ID
      tags:
        - Sample dataset
      description: Deletes a record based on ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier for the record
      responses:
        '200':
          description: Record deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Record deleted"
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Record not found"

components:
  schemas:
    Data:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 111
        forename:
          type: string
          example: Roy
        surname:
          type: string
          example: Fielding

  securitySchemes:
    bearerAuth:
      type: http # arbitrary name for the security scheme
      scheme: bearer
      bearerFormat: JWT
    #ApiKeyAuth:
      #type: apiKey
      #in: header
      #name: X-API-KEY